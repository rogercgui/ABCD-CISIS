aotmsa1.c:                            recfield(batchp,drec,DECSTAGNAME(langp),1,"");  batchp[LE2]='\0';  /* move MH */
aotmsa244a.c:#define MAXCATLEN    LE2    /* 60 */
aotmsa244a.c:    char name[LE2+LE1+1];
aotmsa2.c:#define MAXCATLEN    LE2    /* 60 */
aotmsa2.c:    char name[LE2+LE1+1];
aotmsa2mfn.c:                            recfield(batchp,drec,DECSTAGNAME(langp),1,"");  batchp[LE2]='\0';  /* move MH */
aotmsa2pc.c:#define MAXCATLEN    LE2    /* 60 */
aotmsa2pc.c:    char name[LE2+LE1+1];
aotmsa2x3.c:#define MAXCATLEN    LE2    /* 60 */
aotmsa2x3.c:    char name[LE2+LE1+1];
aotmsa3.c:#define MAXCATLEN    LE2    /* 60 */
aotmsa3.c:    char name[LE2+LE1+1];
chkterm.c:    UBYTE key[LE2+1],*keyp,*p;
chkterm.c:    if (strlen(keyp) > LE2) fatal(keyp);
cib60.hpp:  unsigned char b5_pfxopx[LE2+LE2+1];
cib60.hpp:  unsigned char b5_pfxmsg[LE2+1];
cib72.c:                if (usel > LE2) fatal("b7_pfx/invxtag/^u");
cib72.c:   unsigned char b7opx[2+LE2+1];
cib72.c:    unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
cib72.c:   unsigned char tl_defpfx[LE2+1];
cib72.c:                	if (b7_pfxmdl && b7opxlen > LE2) {
cib72.c:                  	dctlen=LE2-1-3;
cib72.c:    if (newlen > LE2) if (newlen != LE2+2 || (*bufp != '\"' && bufp[newlen-1] != '\"'))
cib72.c:        newlen=LE2;
cib7.hpp:    char b7_pfxopx[LE2+LE2+1];
cib7.hpp:    char b7_pfxmsg[LE2+1];
cibx.hpp:  unsigned char b5_pfxopx[LE2+LE2+1];
cibx.hpp:  unsigned char b5_pfxmsg[LE2+1];
cicgi.c:			if (n < LE2) { memset(q+n,*highv,LE2-n); q[LE2]='\0'; }
cidbx.c:int vlex[NTREE] = { LE1, LE2 };                 /* use it */
cidbx.c:    sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
cifm3.c:            char *p,cnam[3+LE2+2+1]; //.^nxxx^v
cifm3.c:            if (strlen(tmp_ptr)>LE2) tmp_ptr[LE2]='\0'; sprintf(cnam," ^n%s^v",tmp_ptr); cnamlen=strlen(cnam);
cifm3_unicode.c:            char *p,cnam[3+LE2+2+1]; //.^nxxx^v
cifm3_unicode.c:            if (strlen(tmp_ptr)>LE2) tmp_ptr[LE2]='\0'; sprintf(cnam," ^n%s^v",tmp_ptr); cnamlen=strlen(cnam);
cifst.c:    UCHR word[LE2+LE2+LE2+1],*p,*q,*wp,*sp,c1,c2;
cifst.c:            *q=isisuctab[(UCHR)*q]; if (pfxl < LE2) pfxl++;
cifst.c:    UCHR line[LE2+1],a351[LE2+1],*p,bpfx[LE2+1],bkey[LE2+1];
cifst.c:#define LE2X    (LE2*(*lft2))
cifst.c:    try { line=(UCHR *)new UCHR[LE2X];}
cifst.c:    try { a351=(UCHR *)new UCHR[LE2X];}
cifst.c:    try { bpfx=(UCHR *)new UCHR[LE2X];}
cifst.c:    try { bkey=(UCHR *)new UCHR[LE2X];}
cifst.c:#define LE2X    LE2
cifst.c:    bklen=bobkey((char *)keyp,klen,(char *)bkey,LE2X,1,1,1);
cifst.c:    memmove(a351+1,pfxp,(plen+1 > LE2X) ? LE2X-1 : plen);
cifst.c:    bplen=bobkey((char *)pfxp,plen,(char *)bpfx,LE2X,1,1,0);
cifst.c:    if (plen0 <= 0 || LE2X > LE2) {
cifst.c:    if (klen0 <= 0 || *lft2==(MAXMFRL/LE2)) {  // poor solution
cifst.c:    n=(len+bklen > LE2X) ? LE2X-len : bklen;
cifst.c:        if (len < LE2X) *p++ = isisuctab[bkey[n]]; else break;
cifst.c:    if (len < LE2) memset(link2p->key+len,' ',LE2-len);
cifst.c:    UCHR line[1+25+LE2+1],*p,*q;
cifst.c:    if (keylen < 1 || keylen > LE2) fatal("fst_writ/keylen");
cifst.c:    loop = ((keylen <= LE1) ? LE1 : LE2) - keylen;
cifst.c:    loop = ((keylen <= LE1) ? LE1 : LE2) - keylen;
cifst.c:    loop = ((keylen <= LE1) ? LE1 : LE2) - keylen;
cifst.c:    lrecl=25+((treecase)?LE2:LE1); /* ccxl ! */
ciifl.c:  UCHR tkey[LE2+1], *ptkey; /* AOT 23/10/93 */
ciifl.c:              a_p_b_key[LE2+1];
ciifl.c: static UCHR key_ant[LE2+1],
ciifl.c:             key[LE2+1];
ciifl.c:  memset(init_leaf_el2.key,' ',LE2);
ciifl.c:  memset(init_node_el2.key,' ',LE2);
ciifl.c: max= (len <= LE1)? LE1 : LE2 ;
ciifl.c:   	(LE1) primeiro e com as longas (LE2) na sequencia;
ciifl.c: UCHR key_ant_loc[LE2+1];
ciifl.c: char fixline[LE2+1+10+10+10+10+1+1];
ciifl.c: char xbobk[LE2+1];
ciifl.c:	UCHR ansikey[LE2*2];
ciifl.c:       xbobn=bobkey(xbobk,xbobl,(char *)keyp,LE2,1,1,1);
ciifl.c: UCHR key_ant_loc[LE2+1];
ciifl.c: char xbobk[LE2+1];
ciifl.c:       xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
ciifl.c:	   fprintf(stdout,"+++ %"_LD_"/%"_LD_" %d-byte keys/postings \n",nlids[1],nregs[1],LE2);
ciifl.hpp:  UCHR tkey[LE2+1], *ptkey; /* AOT 23/10/93 */
ciifl.hpp:              a_p_b_key[LE2+1];
ciifl.hpp:  UCHR key_ant[LE2+1],
ciifl.hpp:       key[LE2+1];
ciifu.c:static UCHR key[LE2+1],*keyp;
ciifu.c:  UCHR str [LE2+1];
ciifu.c:  char branco[LE2+1];
ciifu.c:  memset((char *)branco,' ',LE2);
ciifu.c:  char branco[LE2+1];
ciifu.c:  memset((char *)branco,' ',LE2);
ciifu.c:  char branco[LE2+1];
ciifu.c:  memset((char *)branco,' ',LE2);
ciifu.c:		    prtlink("[ ] ",pmfn,ptag,pocc,pcnt,p2->key,LE2);
ciifu.c:		    prtlink("[B] ",pmfn,ptag,pocc,pcnt,p2->key,LE2);
ciifuh.c:static  UCHR tkey[LE2+1]; /* AOT 11/09/2000 */
ciifuh.c: UCHR tmp[LE2+1];
ciifuh.c: upif_branqueia((UCHR *)tmp,LE2);
ciifuh.c: UCHR tmp[LE2+1];
ciifuh.c:  upif_branqueia((UCHR *)tmp,LE2);
ciifuh.c: UCHR     tmp[LE2+1];
ciifuh.c: upif_branqueia((UCHR *)tmp,LE2);
ciifuh.c: UCHR tmp[LE2+1];
ciifuh.c:  UCHR  *p_b_key,a_p_b_key[LE2+1];
ciifu.hpp:  UCHR key[LE2+1],*keyp;
ciifu.hpp:  UCHR tkey[LE2+1]; /* AOT 11/09/2000 */
cisis.h:#define LE2         256
cisis.h:#define LE2         512         /* gdb ISISXL */
cisis.h:#define LE2         60          /* gdb ISISXL */
cisis.h:#define LE2         30          /* gdb */
cisis.h:    UCHR     key[LE2] PACKED;          /* gdb .n02 idx key */
cisis.h:    UCHR     key[LE2] PACKED;          /* gdb .l02 idx key */
cisis.h:    UCHR     key[TWORDF][LE2];  /* gdb .l02 idx key */
cisis.h:#define LZKASZ2 (TWORDF*(2+LE2))
cisis.h:    UCHR     trmkey[LE2+1];     /* key padded with blanks and null */
cisis.h:   char b7_pfxopx[LE2+LE2+1];
cisis.h:   char b7_pfxmsg[LE2+1];
cisis.h:    UCHR key[LE2];
cisisx.c:	    memmove(n2p->idx[n].key,up,LE2); up+=LE2;
cisisx.c:    unsigned char lzx0k[LE2+1];
cisisx.c:	    memmove(l2p->idx[n].key,up,LE2); up+=LE2;
cisisx.c:		memmove(lzx0k,lzxkp+1+1,(treecase)?LE2:LE1);
cisisx.c:			if (lzxeq+lzxne > LE2) fatal("leafread/ztree/LE2");
cisisx.c:			memset(p,' ',LE2-lzxkl);
cisisx.c:			memmove(lzx0k,lzx2p->key,LE2);
cisisx.c:			memset(lzx2p->key,' ',LE2);
cisisx.c:		l2p=(L2STRU *)lxlbufp; lxl2p=(LXL2STRU *)lbufp; klen=LE2;
cisisx.cpp: vlex[0] = LE1; vlex[1] = LE2;             /* use it */
cisisx.hpp:  UCHR highv[LE2+1];       /* manca controllo.. if signed */
cisisx.hpp:  UCHR highv[LE2+1];       /* manca controllo.. if signed */
citrm.c:UCHR highv[LE2+1] = { 0xFF, '\0' };     /* manca controllo.. if signed */
citrm.c:UCHR highv[LE2+1] = { 0x7F, '\0' };     /* manca controllo.. if signed */
citrm.c:    memset(&highv[1],highv[0],LE2-1); highv[LE2]='\0';
citrm.c:    UCHR area[LE2+1];
citrm.c:    if (len > LE2) len=LE2;
citrm.c:    memset(TRMkey+len,' ',LE2-len); TRMkey[LE2]='\0';
citrm.c:	tc2=1; n2=LE2;
citrm.c:	treecase=1; n1=LE2;
citrm.c:    UCHR area[LE2+1];
citrm.c:	idxksiz=LE2;
citrm.c:	if (len < LE2) {
citrm.c:	    for (n=LE2-len; n--; )
citrm.c:for (p=keyp,n=LE2+1; n--; p++) printf("%c(%02x)",*p,*p);
citrm.c:for (p=k2p,n=LE2; n--; p++) printf("%c",*p);
citrm.c:for (p=k2p,n=LE2; n--; p++) printf("%c",*p);
citrm.c:	kn=LE2; lcase=1;
citrm.hpp:    UCHR     trmkey[LE2+1];     /* key padded with blanks and null */
Binary file citrm.o matches
ciupg.c:                       prtlink("+++ Y/lk2=",pmfn,ptag,pocc,pcnt,lk2p->key,LE2);}
ciupi.c:            memmove(up,n2p->idx[n].key,LE2); up+=LE2;
ciupi.c:  UCHR  key[LE2+1];
ciupi.c:  UCHR  key[LE2+1];
ciupi.c:  UCHR  key[LE2+1];
ciupi.c:  UCHR  key[LE2+1];
crunchif.c:                    movx(n2xp->key,LE2);
crunchif.c:                    movx(l2xp->key,LE2);
decs9a.c:    vlrecl[1]=25+LE2;
decs9a.c:    if (keylen > LE2) keylen=LE2;
decs9a.c:    loop=(rc)?LE2-keylen:LE1-keylen;
decs9a.c:    if (n > LE2-1-(1+2)) {
decs9a.c:        n = LE2-1-(1+2);
decs9b.c:    vlrecl[1]=25+LE2;
decs9b.c:    lreclx = 6+1 + LE2+1 + 1+1+1+1 + LE2+1 + 2+1+3+1 + 2+1+2+1+1+1+1+1 + 9+1;
decs9b.c:        meshp=keyinp; n1=n3=0; len=n2=(TRMlcase)?LE2:LE1;
decs9b.c:    if (keylen > LE2) keylen=LE2;
decs9b.c:    loop=(rc)?LE2-keylen:LE1-keylen;
decs9b.c:    if (n2 >= LE2) {
decs9b.c:        memmove(batchp,meshkey,LE2); batchp+=LE2;
decs9b.c:        for (loop=LE2-n2; loop--; ) *batchp++ = ' ';
decs9b.c:    if (hn >= LE2) {
decs9b.c:        memmove(batchp,hp,LE2); batchp+=LE2;
decs9b.c:        for (loop=LE2-hn; loop--; ) *batchp++ = ' ';
decsex.c:unsigned char explode[LE2+LE2];
decsex.c:char parmvpfx[PARMNPFX][LE2+1] = { "." };
decsex.c:    unsigned char *p,expcat[LE2+1];
decsex.c:    vlrecl[1]=25+LE2;
decsex.c:    lreclx = 6+1 + LE2+1 + 1+1+1+1 + LE2+1 + 2+1+3+1 + 2+1+2+1+1+1+1+1 + 9+1;
decsex.c:    unsigned char inpkey[LE2+LE2],linkkey[LE2+LE2],sfxkey[LE2+LE2];
decsex.c:    char areaqq[LE2+1];
decsex.c:        len=n2=(TRMlcase)?LE2:LE1;
decsex.c:    if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
decsex.c:    for (loop=LE2-explen; loop--; ) *linp++ = ' ';
decsex.c:    if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
decsex.c:    for (loop=LE2-hn; loop--; ) *linp++ = ' ';
decsex.c:    if (keylen > LE2) keylen=LE2;
decsex.c:    loop=(rc)?LE2-keylen:LE1-keylen;
ifkeys.c:	unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
ifkeys.c:		for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
ifkeys.c:		loop=(TRMlcase) ? LE2 : LE1;
iflind.c:        printf(" <file_lk2>             -> sorted %2d-byte link file\n",LE2);
ifloadao.c:        printf(" <file_lk2>             -> sorted %2d-byte link file\n",LE2);
ifloadao.c:        printf(" <file_lk2>             -> sorted %2d-byte link file\n",LE2);
ifp1.c:unsigned char keydel[LE2+1] = { "**DELETE**" };
ifp1.c:    unsigned char key1[LE2+1],key2[LE2+1],prefkey[LE2+1],qualkey[LE2+1];
ifp1.c:    unsigned char keyiox[LE2+1],keyaut[LE2+1];
ifp1.c:6|LE2|1|1|LE2|2|3|2|2|1|1\n
ifp1.c:        "%%"_LD_"|%%.%ds|%%c|%%c|%%.%ds|%%.2s|%%.3s|%%2d|%%2d|%%d|%%d",LE2,LE2);
ifp1.c:        for (p=key1, n=LE2; n--; ) *p++ = fgetc(fplst); *p='\0'; fgetc(fplst);
ifp1.c:        for (p=key2, n=LE2; n--; ) *p++ = fgetc(fplst);  *p='\0'; 
ifp1.c:        p=TRMlidxp(1); n=LE2;
lydump.c:            UCHR        key[LE2] PACKED;       /* tlc .l02 keys */
lydump.c:        for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
lydump.c:                    for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
lyfreq.c:    char key[LE2+1];
lyfreq.c:    char up1[LE2+1];
lyfreq.c:    char up2[LE2+1];
lyfreq.c:    for (p=up2, n=LE2; n--; ) *p++ = '!'; *p='\0';
mdlmf.c:unsigned char *z1p,*z2p,zkey[LE2+BUFSIZ+1];
mxaot.c:    char  parmk2a[LE2+1];
mxaot.c:    int      jdiwidth=LE2;    /*xptabwidth;*/ 
mxaot.c:            for (xtp=parmk1p, xti=LE2; *xtp && xti; xtp++, xti--) *xtp = isisuctab[(int)*xtp];
mxaot.c:        memset(parmk2a,highv[0],LE2); parmk2a[LE2]='\0';
mxaot.c:            for (xtp=parmk2p, xti=LE2; *xtp && xti; xtp++, xti--) *xtp = isisuctab[(int)*xtp];
mxaot.c:            for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
mxaot.c:          if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
Binary file mx.csm matches
mxfun.c:/*int    */ ptabwidth=100; //LE2+LE2;
Binary file mx.ild matches
mxrel.c:    char *p,*keyp,*q,word[LE2+1],*sp;
mxrel.c:                    if (wn >= LE2) for(; isiswctab[*q]; ) q++;
mxrun.c:int   ptabwidth=100; //LE2+LE2;
mxrun.c:        link2len=LE2+1+8+(ciiflfim?0:1+5+1+4+1+4)+(CRLF?2:1); /* 57: key %8"_LD_" %5d %4d %4d */
mys.c:   int link2len=LE2+1+8+(LIND||ciiflfim?0:1+5+1+4+1+4)+(CRLF?2:1); /* 57: key %8"_LD_" %5d %4d %4d */
myz.c:    char *p,*keyp,prevkey[LE2+1];
myzcru.c:    char *p,*keyp,prevkey[LE2+1];
myzcru.c:	        movx(n2xp->key,LE2);
mz.c:UCHR currkey[LE2+1];
mz.c:LONGX freq[LE2+1];
mz.c:        UCHR word[LE2+1+1]/*,*wp*/;
mz.c:                        for (n=(TRMlcase)?LE2:LE1; n--; )
mz.c:        for (n=0; n <= LE2; n++)
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     if (strlen(keyp) > LE2) fatal(keyp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     if (PARMPFXL+explen+PARMSFXL > LE2) fatal(explode);
nohup.out:     if (PARMPFXL+hn+PARMSFXL > LE2) fatal(linp);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  unsigned char *dbnp,*k1p="",*k2p=NULL,k1[LE2+1],k2[LE2+1];
nohup.out:   for (loop=strlen(k2p), p=k2p+loop; loop <= LE2; )
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:         for (p=lp->lx.l2x[0].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:                     for (p=lp->lx.l2x[i].key, n=LE2; n--; p++) printf("%c",*p);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     sprintf(vp,"/%"_LD_"/%d/%d",MAXMFRL,LE1,LE2);
nohup.out:     unsigned char /*tl_dbname[CIMPL+1],*/tl_opx[LE2+LE2+1];
nohup.out:  char fixline[LE2+1+10+10+10+10+1+1];
nohup.out:        xbobn=bobkey(xbobk,xbobl,keyp,LE2,1,1,1);
nohup.out:             for (xtp=TRMkey+(xti=(TRMlcase)?LE2:LE1)-1; xti--; ) if (*xtp == ' ') *xtp--='\0'; else break;
nohup.out:           if (parmtrace) { printf("+++ TRMkey:\n"); for (xtp=TRMkey, xti=LE2; xti--; xtp++) printf("%c=%02x ",*xtp,*xtp); printf("\n"); }
nohup.out:                     if (wn >= LE2) for(; isiswctab[*q]; ) q++;
nohup.out:wxis_src/citpv.h:10:27: error: 'LE2' undeclared here (not in a function)
nohup.out:   UCHAR    PT_Limit      [LE2+1];
nohup.out:    char buff[LE2+LE2+1];      /* auxiliary string buffer */
nohup.out:     char qlf[LE2+1] = "";
nohup.out:    char key[LE2+1];        /* current key */
nohup.out:    char to[LE2+1];         /* last key */
nohup.out:    char from[LE2+1];       /* first key */
sizeof.c:        idxksiz=LE2;
wtfun.h:     char xjd_name[MAXJDS][LE2+1];  // jd name
wtfun.h:     char xjdv_name[MAXJVS][LE2+1];  // jdv name
wt.h:#define MAXPARMWIDTH  (LE2+LE2)
wtrig2.c:#define MAXPARMWIDTH  (LE2+LE2)
wtrun.c:                 if (nlen > LE2) nlen=LE2;
wtrun.c:                 if (nlen > LE2) nlen=LE2;
Binary file wxis.exe matches
Binary file wxis.ild matches
